# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit, scenario, static-charm, static-lib

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/tempo_coordinator_k8s
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}
    ruff check {[vars]all_path} --fix

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    codespell {[vars]all_path} --skip *.json
    ruff check {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest<8.2.0 # https://github.com/pytest-dev/pytest/issues/12263
    coverage[toml]
    deepdiff
    -r{toxinidir}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest  -v --tb native -s {posargs} {[vars]tst_path}unit
    coverage report

[testenv:scenario]
description = Run scenario tests
deps =
    pytest<8.2.0 # https://github.com/pytest-dev/pytest/issues/12263
    coverage[toml]
    # keep pin until https://github.com/canonical/operator/issues/1572 is fixed
    # ops[testing]==2.17
    ops @ https://github.com/dimaqq/operator/archive/refs/tags/2.20.0-rc20.zip
    ops-tracing @ https://github.com/dimaqq/operator/archive/refs/tags/2.20.0-rc20.zip\#subdirectory=tracing&egg=ops-tracing
    ops-scenario @ https://github.com/dimaqq/operator/archive/refs/tags/2.20.0-rc20.zip\#subdirectory=testing&egg=ops-scenario
    -r{toxinidir}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest  -v --tb native -s {posargs} {[vars]tst_path}scenario
    coverage report

[testenv:catan]
description = Run catan integration tests
deps =
    pytest<8.2.0 # https://github.com/pytest-dev/pytest/issues/12263
    catan@git+github.com/canonical/catan
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest  -v --tb native -s {posargs} {[vars]tst_path}catan
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    pytest<8.2.0 # https://github.com/pytest-dev/pytest/issues/12263
    # see https://github.com/juju/python-libjuju/issues/1025
    juju<=3.3.0,>=3.0
    pytest-operator
    requests
    -r{toxinidir}/requirements.txt
    minio
    tenacity==8.2.3
    # tracegen
    opentelemetry-exporter-otlp-proto-grpc
    opentelemetry-exporter-zipkin
    opentelemetry-exporter-jaeger
    # opentelemetry-exporter-jaeger complains about old generated protos
    protobuf==3.20.*
    # https://github.com/juju/python-libjuju/issues/1184
    websockets<14.0
passenv =
    # for faster local itest iterations: pack once, pass the packed charm to pytest with this envvar
    TEMPO_CHARM
    TEMPO_WORKER_CHARM
commands =
    pytest -v --tb native --log-cli-level=INFO {[vars]tst_path}integration -s {posargs}

[testenv:interface]
description = Run interface tests
deps =
    pytest<8.2.0 # https://github.com/pytest-dev/pytest/issues/12263
    -r{toxinidir}/requirements.txt
    pytest-interface-tester
    # git+https://github.com/canonical/pytest-interface-tester
commands =
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}interface


[testenv:static-{charm,lib}]
description = Static code checking
deps =
    # pydeps
    pyright==1.1.340
    -r{toxinidir}/requirements.txt
commands =
    charm: pyright --pythonversion 3.8 {[vars]src_path}
    lib: pyright --pythonversion 3.8 {[vars]lib_path}
    lib: /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if git ls-tree -r HEAD --name-only | grep -q "^$m$"; then  if ! git diff main $m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; fi; done'
allowlist_externals = /usr/bin/env
